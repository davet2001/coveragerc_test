name: CI
run-name: "${{ github.event_name == 'workflow_dispatch' && format('CI: {0}', github.ref_name) || '' }}"

# yamllint disable-line rule:truthy
on:
  push:
    branches:
      - dev
      - rc
      - master
  pull_request: ~
  workflow_dispatch:
    inputs:
      full:
        description: "Full run (regardless of changes)"
        default: false
        type: boolean
      lint-only:
        description: "Skip pytest"
        default: false
        type: boolean
      skip-coverage:
        description: "Skip coverage"
        default: false
        type: boolean
      pylint-only:
        description: "Only run pylint"
        default: false
        type: boolean
      mypy-only:
        description: "Only run mypy"
        default: false
        type: boolean
  workflow_call:
    outputs:
      default-python-version:
        description: "Default python version"
        value: ${{ jobs.info.outputs.python_versions }}
      python_cache_key:
        value: ${{ jobs.info.outputs.python_cache_key }}

    
env:
  CACHE_VERSION: 5
  UV_CACHE_VERSION: 1
  MYPY_CACHE_VERSION: 8
  HA_SHORT_VERSION: "2024.4"
  DEFAULT_PYTHON: "3.12"
  ALL_PYTHON_VERSIONS: "['3.12']"
  # 10.3 is the oldest supported version
  # - 10.3.32 is the version currently shipped with Synology (as of 17 Feb 2022)
  # 10.6 is the current long-term-support
  # - 10.6.10 is the version currently shipped with the Add-on (as of 31 Jan 2023)
  # 10.10 is the latest short-term-support
  # - 10.10.3 is the latest (as of 6 Feb 2023)
  # 10.11 is the latest long-term-support
  # - 10.11.2 is the version currently shipped with Synology (as of 11 Oct 2023)
  # mysql 8.0.32 does not always behave the same as MariaDB
  # and some queries that work on MariaDB do not work on MySQL
  MARIADB_VERSIONS: "['mariadb:10.3.32','mariadb:10.6.10','mariadb:10.10.3','mariadb:10.11.2','mysql:8.0.32']"
  # 12 is the oldest supported version
  # - 12.14 is the latest (as of 9 Feb 2023)
  # 15 is the latest version
  # - 15.2 is the latest (as of 9 Feb 2023)
  POSTGRESQL_VERSIONS: "['postgres:12.14','postgres:15.2']"
  PRE_COMMIT_CACHE: ~/.cache/pre-commit
  UV_CACHE_DIR: /tmp/uv-cache
  SQLALCHEMY_WARN_20: 1
  PYTHONASYNCIODEBUG: 1
  HASS_CI: 1

jobs:
  nothing:
    name: "Dummy job"
    runs-on: ubuntu-22.04
    steps:
      - name: Set current date as env variable
        run: echo "NOW=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV
      - name: Echo current date
        run: echo $NOW # Gives "2022-12-11T01:42:20"      
  info:
    name: Collect information & changes data
    outputs:
      # In case of issues with the partial run, use the following line instead:
      # test_full_suite: 'true'
      core: ${{ steps.core.outputs.changes }}
      integrations_glob: ${{ steps.info.outputs.integrations_glob }}
      integrations: ${{ steps.integrations.outputs.changes }}
      pre-commit_cache_key: ${{ steps.generate_pre-commit_cache_key.outputs.key }}
      python_cache_key: ${{ steps.generate_python_cache_key.outputs.key }}
      requirements: ${{ steps.core.outputs.requirements }}
      mariadb_groups: ${{ steps.info.outputs.mariadb_groups }}
      postgresql_groups: ${{ steps.info.outputs.postgresql_groups }}
      python_versions: ${{ steps.info.outputs.python_versions }}
      test_full_suite: ${{ steps.info.outputs.test_full_suite }}
      test_group_count: ${{ steps.info.outputs.test_group_count }}
      test_groups: ${{ steps.info.outputs.test_groups }}
      tests_glob: ${{ steps.info.outputs.tests_glob }}
      tests: ${{ steps.info.outputs.tests }}
      skip_coverage: ${{ steps.info.outputs.skip_coverage }}
    runs-on: ubuntu-22.04
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.1.2
      - name: Generate partial Python venv restore key
        id: generate_python_cache_key
        run: >-
          echo "key=venv-${{ env.CACHE_VERSION }}-${{
            hashFiles('requirements_test.txt') }}-${{
            hashFiles('requirements_all.txt') }}" >> $GITHUB_OUTPUT
      - name: Collect additional information
        id: info
        run: |
          # Defaults
          integrations_glob=""
          mariadb_groups=${MARIADB_VERSIONS}
          postgresql_groups=${POSTGRESQL_VERSIONS}
          test_full_suite="true"
          test_groups="[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
          test_group_count=10
          tests="[]"
          tests_glob=""
          skip_coverage=""

          if [[ "${{ steps.integrations.outputs.changes }}" != "[]" ]];
          then
            # Create a file glob for the integrations
            integrations_glob=$(echo '${{ steps.integrations.outputs.changes }}' | jq -cSr '. | join(",")')
            [[ "${integrations_glob}" == *","* ]] && integrations_glob="{${integrations_glob}}"

            # Create list of testable integrations
            possible_integrations=$(echo '${{ steps.integrations.outputs.changes }}' | jq -cSr '.[]')
            tests=$(
              for integration in ${possible_integrations};
              do
                if [[ -d "tests/components/${integration}" ]]; then
                  echo -n "\"${integration}\",";
                fi;
              done
            )

            [[ ! -z "${tests}" ]] && tests="${tests::-1}"
            tests="[${tests}]"
            test_groups="${tests}"
            # Test group count should be 1, we don't split partial tests
            test_group_count=1

            # Create a file glob for the integrations tests
            tests_glob=$(echo "${tests}" | jq -cSr '. | join(",")')
            [[ "${tests_glob}" == *","* ]] && tests_glob="{${tests_glob}}"

            mariadb_groups="[]"
            postgresql_groups="[]"
            test_full_suite="false"
          fi

          # We need to run the full suite on certain branches.
          # Or, in case core files are touched, for the full suite as well.
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]] \
            || [[ "${{ github.ref }}" == "refs/heads/master" ]] \
            || [[ "${{ github.ref }}" == "refs/heads/rc" ]] \
            || [[ "${{ steps.core.outputs.any }}" == "true" ]] \
            || [[ "${{ github.event.inputs.full }}" == "true" ]] \
            || [[ "${{ contains(github.event.pull_request.labels.*.name, 'ci-full-run') }}" == "true" ]];
          then
            mariadb_groups=${MARIADB_VERSIONS}
            postgresql_groups=${POSTGRESQL_VERSIONS}
            test_groups="[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
            test_group_count=10
            test_full_suite="true"
          fi

          if [[ "${{ github.event.inputs.skip-coverage }}" == "true" ]] \
            || [[ "${{ contains(github.event.pull_request.labels.*.name, 'ci-skip-coverage') }}" == "true" ]];
          then
            skip_coverage="true"
          fi

          # Output & sent to GitHub Actions
          echo "mariadb_groups: ${mariadb_groups}"
          echo "mariadb_groups=${mariadb_groups}" >> $GITHUB_OUTPUT
          echo "postgresql_groups: ${postgresql_groups}"
          echo "postgresql_groups=${postgresql_groups}" >> $GITHUB_OUTPUT
          echo "python_versions: ${ALL_PYTHON_VERSIONS}"
          echo "python_versions=${ALL_PYTHON_VERSIONS}" >> $GITHUB_OUTPUT
          echo "test_full_suite: ${test_full_suite}"
          echo "test_full_suite=${test_full_suite}" >> $GITHUB_OUTPUT
          echo "integrations_glob: ${integrations_glob}"
          echo "integrations_glob=${integrations_glob}" >> $GITHUB_OUTPUT
          echo "test_group_count: ${test_group_count}"
          echo "test_group_count=${test_group_count}" >> $GITHUB_OUTPUT
          echo "test_groups: ${test_groups}"
          echo "test_groups=${test_groups}" >> $GITHUB_OUTPUT
          echo "tests: ${tests}"
          echo "tests=${tests}" >> $GITHUB_OUTPUT
          echo "tests_glob: ${tests_glob}"
          echo "tests_glob=${tests_glob}" >> $GITHUB_OUTPUT
          echo "skip_coverage: ${skip_coverage}"
          echo "skip_coverage=${skip_coverage}" >> $GITHUB_OUTPUT


  base:
    name: Prepare dependencies
    runs-on: ubuntu-22.04
    needs: info
    timeout-minutes: 60
    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.info.outputs.python_versions) }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.1.2
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
      - name: Generate partial uv restore key
        id: generate-uv-key
        run: >-
          echo "key=uv-${{ env.UV_CACHE_VERSION }}-${{
            env.HA_SHORT_VERSION }}-$(date -u '+%Y-%m-%dT%H:%M:%s')" >> $GITHUB_OUTPUT
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v4.0.2
        with:
          path: venv
          lookup-only: true
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{ needs.info.outputs.python_cache_key }}
      - name: Restore uv wheel cache
        if: steps.cache-venv.outputs.cache-hit != 'true'
        uses: actions/cache@v4.0.2
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            steps.generate-uv-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-uv-${{ env.UV_CACHE_VERSION }}-${{ env.HA_SHORT_VERSION }}-
      - name: Install additional OS dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get -y install \
            bluez \
            ffmpeg \
            libavcodec-dev \
            libavdevice-dev \
            libavfilter-dev \
            libavformat-dev \
            libavutil-dev \
            libswresample-dev \
            libswscale-dev \
            libudev-dev
      - name: Create Python virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          . venv/bin/activate
          python --version
          pip install "$(grep '^uv' < requirements_test.txt)"
          uv pip install -U "pip>=21.3.1" setuptools wheel
          #uv pip install -r requirements_all.txt
          uv pip install -r requirements_test.txt
          uv pip install -e . --config-settings editable_mode=compat
        

  # gen-requirements-all:
  #   name: Check all requirements
  #   runs-on: ubuntu-22.04
  #   if: |
  #     github.event.inputs.pylint-only != 'true'
  #     && github.event.inputs.mypy-only != 'true'
  #   needs:
  #     - info
  #     - base
  #   steps:
  #     - name: Check out code from GitHub
  #       uses: actions/checkout@v4.1.2
  #     - name: Set up Python ${{ env.DEFAULT_PYTHON }}
  #       id: python
  #       uses: actions/setup-python@v5.0.0
  #       with:
  #         python-version: ${{ env.DEFAULT_PYTHON }}
  #         check-latest: true
  #     - name: Restore base Python virtual environment
  #       id: cache-venv
  #       uses: actions/cache/restore@v4.0.2
  #       with:
  #         path: venv
  #         fail-on-cache-miss: true
  #         key: >-
  #           ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
  #           needs.info.outputs.python_cache_key }}
  #     - name: Run gen_requirements_all.py
  #       run: |
  #         . venv/bin/activate
  #         python -m script.gen_requirements_all validate
